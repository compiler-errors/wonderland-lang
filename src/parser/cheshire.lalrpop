use std::collections::{HashMap, BTreeSet};
use std::str::FromStr;

use crate::ast::*;
use crate::parser::util::*;
use crate::lexer::*;
use crate::util::{FileId, FileRegistry, Span, PError};
use lalrpop_util::ParseError;

grammar(file: FileId, module_name: &str);

extern {
    type Error = PError;
    type Location = usize;

    enum Token {
        "." => Token::Dot,
        ".." => Token::DotDot,
        "..." => Token::Ellipsis,
        "," => Token::Comma,
        ",,," => Token::Commalipses,
        ":" => Token::Colon,
        "::" => Token::ColonColon,
        ";" => Token::SemiColon,
        ":<" => Token::ColonLt,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LSqBracket,
        "]" => Token::RSqBracket,
        "<" => Token::Lt,
        ">" => Token::Gt,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "->" => Token::RArrow,
        "=>" => Token::RBigArrow,
        "_" => Token::Underscore,
        "?" => Token::Question,

        "<=" => Token::LessEqual,
        ">=" => Token::GreaterEqual,
        "==" => Token::EqualsEquals,
        "!=" => Token::NotEquals,
        "&" => Token::And,
        "|" => Token::Pipe,
        "&?" => Token::AndShort,
        "|?" => Token::PipeShort,
        "=" => Token::Equals,
        "!" => Token::Bang,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "%" => Token::Modulo,

        "use" => Token::Use,
        "pub" => Token::Pub,
        "mod" => Token::Mod,
        "fn" => Token::Fn,
        "export" => Token::Export,
        "let" => Token::Let,
        "trait" => Token::Trait,
        "impl" => Token::Impl,
        "where" => Token::Where,
        "for" => Token::For,
        "in" => Token::In,
        "as" => Token::As,
        "if" => Token::If,
        "else" => Token::Else,
        "while" => Token::While,
        "break" => Token::Break,
        "continue" => Token::Continue,
        "at" => Token::At,
        "return" => Token::Return,
        "assert" => Token::Assert,
        "true" => Token::True,
        "false" => Token::False,
        "object" => Token::Object,
        "type" => Token::Type,
        "self" => Token::SelfRef,
        "allocate" => Token::Allocate,
        "enum" => Token::Enum,
        "match" => Token::Match,
        "instruction" => Token::Instruction,

        "Int" => Token::Int,
        "Float" => Token::Float,
        "Bool" => Token::Bool,
        "String" => Token::StringType,
        "Char" => Token::Char,
        "Self" => Token::SelfType,
        "Fn" => Token::FnTrait,
        "Dyn" => Token::DynTrait,
        "ClosureEnvironment" => Token::ClosureEnvironment,

        String => Token::String(<String>),
        Integer => Token::IntLiteral(<String>),
        Float => Token::FloatLiteral(<String>),
        InstructionLiteral => Token::InstructionLiteral(<String>),
        Char => Token::CharLiteral(<char>),

        InterpolateBegin => Token::InterpolateBegin(<String>),
        InterpolateContinue => Token::InterpolateContinue(<String>),
        InterpolateEnd => Token::InterpolateEnd(<String>),

        Identifier => Token::Identifier(<String>),
        TypeName => Token::TypeName(<String>),
        GenericName => Token::GenericName(<String>),

        "$[Block](" => Token::QuotationStart(crate::lexer::QUOTE_BLOCK),
        "$[Break](" => Token::QuotationStart(crate::lexer::QUOTE_BREAK),
        "$[Continue](" => Token::QuotationStart(crate::lexer::QUOTE_CONTINUE),
        "$[Dummy](" => Token::QuotationStart(crate::lexer::QUOTE_DUMMY),
        "$[DummyGeneric](" => Token::QuotationStart(crate::lexer::QUOTE_DUMMYGENERIC),
        "$[GenericPlaceholder](" => Token::QuotationStart(crate::lexer::QUOTE_GENERICPLACEHOLDER),
        "$[Identifier](" => Token::QuotationStart(crate::lexer::QUOTE_IDENTIFIER),
        "$[Infer](" => Token::QuotationStart(crate::lexer::QUOTE_INFER),
        "$[For](" => Token::QuotationStart(crate::lexer::QUOTE_FOR),
        "$[While](" => Token::QuotationStart(crate::lexer::QUOTE_WHILE),
        "$[MatchBranch](" => Token::QuotationStart(crate::lexer::QUOTE_MATCHBRANCH),
        "$[ModuleRef](" => Token::QuotationStart(crate::lexer::QUOTE_MODULEREF),
        "$[NamedVariable](" => Token::QuotationStart(crate::lexer::QUOTE_NAMEDVARIABLE),
        "$[SpannedExpr](" => Token::QuotationStart(crate::lexer::QUOTE_SPANNEDEXPR),
        "$[SpannedPattern](" => Token::QuotationStart(crate::lexer::QUOTE_SPANNEDPATTERN),
        "$[StaticCall](" => Token::QuotationStart(crate::lexer::QUOTE_STATICCALL),
        "$[GlobalVariable](" => Token::QuotationStart(crate::lexer::QUOTE_GLOBALVARIABLE),
        "$[GlobalFn](" => Token::QuotationStart(crate::lexer::QUOTE_GLOBALFN),
        "$[Closure](" => Token::QuotationStart(crate::lexer::QUOTE_CLOSURE),


        ")$" => Token::QuotationEnd,
    }
}

S<T>: Spanned<T> = {
    <l:@L> <t:T> <h:@R> => Spanned::new(Span::new(file, l, h), t),
}

CommaTrailingOrEmpty<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => append_maybe(v, e),
};

CommaTrailing<T>: Vec<T> = {
    <T> => vec![<>],
    <v:(<T> ",")+> <e:T?> => append_maybe(v, e),
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => append(v, e),
};

PlusSeparated<T>: Vec<T> = {
    <v:(<T> "+")*> <e:T> => append(v, e),
};

OrUnderscore<T>: Option<T> = {
    <T> => Some(<>),
    "_" => None,
};

QuotedId: usize = {
    <l:@L> <id:Integer> <h:@R> =>?
        usize::from_str(&id).map_err(|_| ParseError::User {
            error: PError::new_at(Span::new(file, l, h), format!("Cannot parse `{}` as tuple index", id))
        }),
}

// --- Types --- //

Generic: AstGeneric = GenericName => AstGeneric::new(<>);

TypeNamePath: ModuleRef = {
    <v:(<Identifier> "::")*> <e:TypeName> => ModuleRef::Denormalized(append(v, e)),
    "$[ModuleRef](" <id:QuotedId> "," <e:TypeName> ")$" => ModuleRef::Normalized(FileId(id), e),
};

IdentifierPath: ModuleRef = {
    <v:(<Identifier> "::")*> <e:Identifier> => ModuleRef::Denormalized(append(v, e)),
    "$[ModuleRef](" <id:QuotedId> "," <e:Identifier> ")$" => ModuleRef::Normalized(FileId(id), e),
};

Type = BaseType<"">;
ClosureParameterType = BaseType<"C">;
TransmuteType = BaseType<"T">;

BaseType<C>: AstType = {
    <AssociableType<C>>,
    <TupleType>,
    "_" => AstType::infer(),
    "[" <Type> "]" => AstType::array(<>),

    // This is not allowed to be in the RHS of an "expr as Ty"
    "fn" "(" <CommaTrailingOrEmpty<Type>> ")" <MaybeReturn> if  C !~ ".*T.*" =>
        AstType::fn_ptr_type(<>),

    // This is not allowed to be in the RHS of an "expr as Ty" or the argument of a closure
    "|" <CommaTrailingOrEmpty<ClosureParameterType>> "|" <MaybeReturn> if C !~ ".*(C|T).*" =>
        AstType::closure_type(<>),
};

AssociableType<C>: AstType = {
    // Any type can be accessed with brackets, e.g. `<()>::AssociatedType`
    "<" <Type> ">",

    "Int" => AstType::Int,
    "Float" => AstType::Float,
    "Bool" => AstType::Bool,
    "String" => AstType::String,
    "Char" => AstType::Char,
    "Self" => AstType::SelfType,
    "ClosureEnvironment" => AstType::ClosureEnvType,
    GenericName => AstType::generic(<>.to_string()),

    "<" <Type> "as" <TraitTypeWithAssocs> ">" =>
        AstType::elaborated_type(<>),

    "Dyn" <MaybeDynTraits<C>> =>
        AstType::dynamic_type(<>),

    // Object or enum types, with optional generic. E.g. `Option<Int>`
    // NOTE: Only plain typenames are allowed in the RHS of a "expr as Ty".
    // That is, `as Ty<_T>` is disallowed. Instead, use "as <Ty<_T>>".
    <TypeNamePath> <MaybeExprGenerics> if C !~ ".*T.*" =>
        AstType::object_or_enum(<>),
    <TypeNamePath> if C == "transmute" =>
        AstType::object_or_enum(<>, vec![]),

    // An associated type, e.g. `<()>::Item`
    <AssociableType<C>> "::" <TypeName> =>
        AstType::associated_type(<>),

    "$[Infer](" <id:QuotedId> ")$" =>
        AstType::Infer(InferId(id)),
    "$[Dummy](" <id:QuotedId> ")$" =>
        AstType::Dummy(DummyId(id)),
    "$[DummyGeneric](" <i:TypeName> "," <id:QuotedId> ")$" =>
        AstType::DummyGeneric(GenericId(id), i),
    "$[GenericPlaceholder](" <id:QuotedId> "," <i:TypeName> ")$" =>
        AstType::GenericPlaceholder(GenericId(id), i),
}

TupleType: AstType = {
    "(" ")" => AstType::none(),
    "(" <v:(<Type> ",")+> <e:Type?> ")" => AstType::tuple(append_maybe(v, e)),
};

TypeRestriction: (AstType, Vec<AstTraitTypeWithAssocs>) = {
    <Type> ":" <PlusSeparated<TraitTypeWithAssocs>>,
};

TraitType: AstTraitType = {
    <TypeNamePath> <MaybeExprGenerics> => AstTraitType::new(<>),
};

MaybeExprGenerics = {
    "<" <CommaTrailing<Type>> ">",
    () => vec![],
};

MaybeDynTraits<C>: BTreeSet<AstTraitTypeWithAssocs> = {
    "<" <PlusSeparated<TraitTypeWithAssocs>> ">" =>?
        Ok(dedup_set("dynamic traits", <>)?),
    () if C !~ ".*T.*" => BTreeSet::new(),
}

TraitTypeWithAssocs: AstTraitTypeWithAssocs = {
    <TypeNamePath> <MaybeExprGenericsOrAssoc> =>? Ok(AstTraitTypeWithAssocs::try_flatten(<>)?),
    "Fn" "(" <CommaTrailingOrEmpty<Type>> ")" <MaybeReturn> => AstTraitTypeWithAssocs::fn_trait(<>),
};

MaybeExprGenericsOrAssoc = {
    "<" <CommaTrailing<TypeOrBinding>> ">",
    () => vec![],
};

TypeOrBinding: AstTypeOrBinding = {
    <Type> => AstTypeOrBinding::Type(<>),
    "::" <TypeName> "=" <Type> => AstTypeOrBinding::Binding(<>),
};

// --- Program --- ///

pub Module: AstModule = {
    <ModuleMember*> =>?
        Ok(AstModule::try_new_from_members(file, module_name.to_string(), <>)?),
};

ModuleMember: AstModuleMember = {
    <u:Use> => AstModuleMember::Use(u.0, u.1),
    <Function> => AstModuleMember::Function(<>),
    <Object> => AstModuleMember::Object(<>),
    <Trait> => AstModuleMember::Trait(<>),
    <Enum> => AstModuleMember::Enum(<>),
    <Impl> => AstModuleMember::Impl(<>),
    <Global> => AstModuleMember::Global(<>),
};

// -- Global --- //

Global: AstGlobalVariable = {
    "let" <l:@L> <i:Identifier> <h:@R> ":" <t:Type> "=" <e:Expression> "."+ =>
        AstGlobalVariable::new(file, Span::new(file, l, h), i, t, e),
};

/// --- Function --- ///

Function: AstFunction = {
    "export" "fn" <l:@L> <i:Identifier> <h:@R> <g:MaybeDeclGenerics> <p:DeclParams> <r:SMaybeReturn> <w:MaybeRestrictions> "." =>
        AstFunction::new_declaration(file, Span::new(file, l, h), i, g, p, r, w),
    "fn" <l:@L> <i:Identifier> <h:@R> <g:MaybeDeclGenerics> <p:DeclParams> <r:SMaybeReturn> <w:MaybeRestrictions> "=" <e:Expression> "." =>
        AstFunction::new_definition(file, Span::new(file, l, h), i, g, p, r, w, e),
};

MaybeDeclGenerics = {
    "<" <CommaTrailing<Generic>> ">",
    () => vec![],
};

// TODO: Verify no duplicates
DeclParams: Vec<AstNamedVariable> = "(" <p:CommaTrailingOrEmpty<DeclParam>> ")" =>? {
    check_dedup_keys("parameters", p.iter().map(|p| &p.name))?;
    Ok(p)
};

DeclParam: AstNamedVariable = <l:@L> <i:Identifier> ":" <t:Type> <h:@R> => AstNamedVariable::new(Span::new(file, l, h), i, t);

MaybeReturn: AstType = {
    "->" <Type>,
    () => AstType::none(),
};

SMaybeReturn: Spanned<AstType> = {
    "->" <S<Type>>,
    <l:@L> () <h:@R> => Spanned::new(Span::new(file, l, h), AstType::none()),
};

MaybeRestrictions: Vec<AstTypeRestriction> = {
    "where" <Comma<TypeRestriction>> => AstTypeRestriction::flatten(<>),
    () => vec![],
};

// --- Statement --- //

Block: AstBlock = {
    <@L> "{" "."* "}" <@R> => AstBlock::empty(Span::new(file, <>)),
    "{" "."* <v:(<Statement>)*> <e:Expression> "}" => AstBlock::new(v, e),
    "{" "."* <v:(<Statement>)*> <d:DottedStatement> <l:@L> "}" <r:@R> =>
        AstBlock::new(append(v, d), AstExpression::nothing(Span::new(file, l, r))),
    "$[Block](" <mut b:Block> "," "(" <scope:CommaTrailingOrEmpty<QuotedNamedVariable>> ")" ")$" => {
        amend_variables(scope, &mut b.scope);
        b
    }
};

BlockExpression: AstExpression = {
    <l:@L> <b:Block> <h:@R> => AstExpression::block(Span::new(file, l, h), b),
};

QuotedNamedVariable: AstNamedVariable =
    "$[NamedVariable](" <f:QuotedId> "," <l:QuotedId> "," <h:QuotedId> "," <n:Identifier> "," <t:Type> "," <i:QuotedId> ")$" =>
        AstNamedVariable::quoted_new(Span::new(FileId(f), l, h), n, t, VariableId(i));

Statement: AstStatement = {
    <UndottableExpression> => AstStatement::expression_statement(<>),
    <DottedStatement>,
};

DottedStatement: AstStatement = {
    "let" <Pattern> "=" <Expression> "."+ => AstStatement::let_statement(<>),
    <Expression> "."+ => AstStatement::expression_statement(<>),
};

// --- Expressions --- //

LBinOp<Operators, Term>: AstExpression = {
    <l:@L> <a:LBinOp<Operators, Term>> <o:Operators> <b:Term> <h:@R> => AstExpression::binop_from_token(Span::new(file, l, h), a, o, b),
    <Term>,
};

// Prec0 = { "..", "=" };
Prec1 = { "|?" };
Prec2 = { "&?" };
Prec3 = { "|" };
Prec4 = { "&" };
Prec5 = { "<", ">", "<=", ">=", "==", "!=" };
Prec6 = { "+", "-" };
Prec7 = { "*", "/", "%" };
// Prec8 = { unary "!", unary "-" }

pub Expression = Expression0<"">;
// Expressions that can precede a block, e.g. ```if <PreblockExpression> {```
PreblockExpression = Expression0<"P">;

Expression0<PB>: AstExpression = {
    <l:@L> <a:Expression1<PB>> "=" <b:Expression0<PB>> <h:@R> =>
        AstExpression::assign(Span::new(file, l, h), a, b),
    <l:@L> <a:Expression1<PB>> <t:".."> <b:RangeEnder<PB>> <h:@R> =>
        AstExpression::binop_from_token(Span::new(file, l, h), a, t, b),
    <Expression1<PB>>,
};
Expression1<PB> = {
    <UndottableExpression> if PB !~ ".*R.*",
    <ClosureExpression<PB>>,
    <ControlFlowExpression<PB>>,
    <InstructionExpression>,
    <LBinOp<Prec1, Expression2<PB>>>,
};
Expression2<PB> = LBinOp<Prec2, Expression3<PB>>;
Expression3<PB> = LBinOp<Prec3, Expression4<PB>>;
Expression4<PB> = LBinOp<Prec4, Expression5<PB>>;
Expression5<PB> = LBinOp<Prec5, Expression6<PB>>;
Expression6<PB> = LBinOp<Prec6, Expression7<PB>>;
Expression7<PB> = LBinOp<Prec7, Expression8<PB>>;
Expression8<PB> = {
    <l:@L> "!" <e:Expression8<PB>> <h:@R> => AstExpression::not(Span::new(file, l, h), e),
    <l:@L> "-" <e:Expression8<PB>> <h:@R> => AstExpression::neg(Span::new(file, l, h), e),
    <Expression9<PB>>,
};
Expression9<PB> = {
    <l:@L> <e:Expression9<PB>> "?" <h:@R> => AstExpression::throw(Span::new(file, l, h), e),
    <Expression10<PB>>,
}
Expression10<PB> = BaseExpression<PB>;

RangeEnder<PB>: AstExpression = {
    // TODO: These cases can get out of hand... I wish there were a way of appending "R" to `PB`
    <Expression1<"PR">> if PB ~~ "PR?" => <>,
    <Expression1<"R">> if PB == "" => <>,
    <l:@L> <h:@R> => AstExpression::nothing(Span::new(file, l, h)),
}

InstructionExpression: AstExpression = {
    <l:@L> "instruction" <i:String> "(" <p:CommaTrailingOrEmpty<InstructionArgument>> ")" "->" <o:InstructionOutput> <h:@R> =>
        AstExpression::instruction(Span::new(file, l, h), i, p, o),
};

ClosureExpression<PB>: AstExpression = {
    <l:@L> "|" <p:CommaTrailingOrEmpty<Pattern>> "|" "->" <r:Type> <bl:@L> <b:Block> <h:@R> =>
        AstExpression::closure(Span::new(file, l, h), p, r, AstExpression::block(Span::new(file, bl, h), b)),
    <l:@L> "|" <p:CommaTrailingOrEmpty<Pattern>> "|" <e:Expression1<PB>> <h:@R> =>
        AstExpression::closure(Span::new(file, l, h), p, AstType::infer(), e),
};

// "Control-flow" expressions. These are not all control-flow (e.g. `assert`),
// but are characterized as being quite statement-like and they have especially low precedence.
ControlFlowExpression<PB>: AstExpression = {
    <l:@L> "assert" <e:Expression2<PB>> <h:@R> =>
        AstExpression::assert_statement(Span::new(file, l, h), e),
    <l:@L> "return" <h:@R> =>
        AstExpression::return_nothing(Span::new(file, l, h)),
    <l:@L> "return" <e:Expression2<PB>> <h:@R> =>
        AstExpression::return_statement(Span::new(file, l, h), e),
    <l:@L> "break" <e:Expression2<PB>?> <h:@R> =>
        AstExpression::break_stmt(Span::new(file, l, h), e.unwrap_or_else(|| AstExpression::nothing(Span::new(file, l, h))), None),
    <l:@L> "break" <e:Expression2<PB>?> "at" <i:Identifier> <h:@R> =>
        AstExpression::break_stmt(Span::new(file, l, h), e.unwrap_or_else(|| AstExpression::nothing(Span::new(file, l, h))), Some(i)),
    <l:@L> "continue" <h:@R> =>
        AstExpression::continue_stmt(Span::new(file, l, h), None),
    <l:@L> "continue" "at" <i:Identifier> <h:@R> =>
        AstExpression::continue_stmt(Span::new(file, l, h), Some(i)),

    <l:@L> "$[Break](" <b:OrUnderscore<Identifier>> <i:OrUnderscore<QuotedId>> <e:Expression> ")$" <h:@R> =>
        AstExpression::quoted_break_stmt(Span::new(file, l, h), e, b, i),
    <l:@L> "$[Continue](" <b:OrUnderscore<Identifier>> <i:OrUnderscore<QuotedId>> ")$" <h:@R> =>
        AstExpression::quoted_continue_stmt(Span::new(file, l, h), b, i),
};

BaseExpression<PB>: AstExpression = {
    // Any expression that can be on the LHS of the `()` operator, e.g. `Call` trait
    <CallableExpression>,
    // Array access syntax. Even non-callable base expressions can be accessed.
    <l:@L> <c:BaseExpression<PB>> "[" <i:Expression> "]" <h:@R> =>
        AstExpression::access(Span::new(file, l, h), c, i),
    // An object-access or object-call
    <l:@L> <ex:BaseExpression<PB>> ":" <id:Identifier> <call:MaybeObjectCall> <h:@R> => match call {
        None => AstExpression::object_access(Span::new(file, l, h), ex, id),
        Some((generics, args)) => AstExpression::object_call(Span::new(file, l, h), ex, id, generics, args),
    },
    // Tuple access, e.g. `(1, 2):0`
    <l:@L> <ex:BaseExpression<PB>> ":" <id:Integer> <h:@R> =>?
        Ok(AstExpression::tuple_access(Span::new(file, l, h), ex, usize::from_str(&id)
            .map_err(|_| ParseError::User {
                error: PError::new_at(Span::new(file, l, h), format!("Cannot parse `{}` as tuple index", id))
        })?)),
    // Enum constructor
    <l:@L> <e:TypeNamePath> <g:MaybeExprGenerics> "!" <v:TypeName> <a:EnumConstructorArguments<PB>> <h:@R> =>
        AstExpression::enum_constructor_from_args(Span::new(file, l, h), e, g, v, a),
    // Object allocation, e.g. `allocate Box { item: 1 }`
    // NOTE: This cannot exist in a position preceding a block,
    // e.g. `if allocate Box { item: 1 }` is illegal.
    <l:@L> "allocate" <o:TypeNamePath> <g:MaybeExprGenerics> "{" "}" <h:@R> if PB !~ ".*P.*" =>
        AstExpression::allocate_object(Span::new(file, l, h), o, g, HashMap::new()),
    <l:@L> "allocate" <o:TypeNamePath> <g:MaybeExprGenerics> <f:NamedExpressionFields> <h:@R> if PB !~ ".*P.*" =>
        AstExpression::allocate_object(Span::new(file, l, h), o, g, f),
    // A transmute operator. This desugars into `<_ as Into<T>>::into(e)`
    <l:@L> <e:BaseExpression<PB>> "as" <t:TransmuteType> <h:@R> =>
        AstExpression::transmute(Span::new(file, l, h), e, t),
};

InstructionArgument: InstructionArgument = {
    <Expression> => InstructionArgument::Expression(<>),
    "_" ":" <Type> => InstructionArgument::Type(<>),
    <InstructionLiteral> => InstructionArgument::Anonymous(<>),
};

InstructionOutput: InstructionOutput = {
    <Type> => InstructionOutput::Type(<>),
    <InstructionLiteral> => InstructionOutput::Anonymous(<>),
};

MaybeObjectCall: Option<(Vec<AstType>, Vec<AstExpression>)> = {
    <MaybeColonExprGenerics> "(" <CommaTrailingOrEmpty<Expression>> ")" => Some((<>)),
    () => None,
};

MaybeColonExprGenerics = {
    ":<" <CommaTrailing<Type>> ">",
    () => vec![],
};

NamedExpressionFields: HashMap<String, AstExpression> = {
    "{" <k:CommaTrailing<NamedExpressionField>> "}" =>? dedup_keys("named fields", k),
};

NamedExpressionField: (String, AstExpression) = {
    <l:@L> <i:Identifier> <h:@R> => (i.clone(), AstExpression::identifier(Span::new(file, l, h), i)),
    <Identifier> ":" <Expression>,
};

EnumConstructorArguments<PB>: AstEnumConstructorArguments = {
    NamedExpressionFields if PB !~ ".*P.*" => AstEnumConstructorArguments::Named(<>),
    "(" <CommaTrailing<Expression>> ")" => AstEnumConstructorArguments::Positional(<>),
    () => AstEnumConstructorArguments::Plain,
};

CallableExpression: AstExpression = {
    "(" <Expression> ")",
    <TupleExpression>,
    <IdentifierExpression>,
    <l:@L> <e:Literal> <h:@R> => AstExpression::literal(Span::new(file, l, h), e),
    <l:@L> "self" <h:@R> => AstExpression::self_ref(Span::new(file, l, h)),
    <l:@L> ",,," <h:@R> => AstExpression::unimplemented(Span::new(file, l, h)),
    <l:@L> "allocate" "[" <t:Type> ";" <n:Expression> "]" <h:@R> => AstExpression::allocate_array(Span::new(file, l, h), t, n),
    <l:@L> "[" <e:CommaTrailingOrEmpty<Expression>> "]" <h:@R> => AstExpression::array_literal(Span::new(file, l, h), e),
    <l:@L> <c:CallableExpression> "(" <p:CommaTrailingOrEmpty<Expression>> ")" <h:@R> => AstExpression::expr_call(Span::new(file, l, h), c, p),
    <l:@L> <t:AssociableType<"">> ":" <f:Identifier> <g:MaybeColonExprGenerics> "(" <p:CommaTrailingOrEmpty<Expression>> ")" <h:@R> => AstExpression::static_call(Span::new(file, l, h), t, f, g, p),
    <l:@L> <s:InterpolateBegin> <s2:InterpolateBody> <h:@R> => AstExpression::string_interpolation_begin(Span::new(file, l, h), s, s2),

    <l:@L> "$[Identifier](" <i:Identifier> "," <id:QuotedId> ")$" <h:@R> =>
        AstExpression::quoted_identifier(Span::new(file, l, h), i, VariableId(id)),
    <l:@L> "$[Identifier](" "self" "," <id:QuotedId> ")$" <h:@R> =>
        AstExpression::quoted_identifier(Span::new(file, l, h), "self".to_string(), VariableId(id)),
    "$[SpannedExpr](" <f:QuotedId> "," <l:QuotedId> "," <h:QuotedId> "," <t:Type> "," <mut e:Expression> ")$" => {
        e.span = Span::new(FileId(f), l, h);
        e.ty = t;
        e
    },
    <l:@L> "$[StaticCall]("
        <ty:Type> ","
        <trt:TraitTypeWithAssocs> ","
        <fn_name:Identifier> ","
        "(" <fn_generics:CommaTrailingOrEmpty<Type>> ")" ","
        "(" <args:CommaTrailingOrEmpty<Expression>> ")" ","
        <impl_id:QuotedId> ","
        "(" <impl_generics:CommaTrailingOrEmpty<Type>> ")" ")$" <h:@R> =>
        AstExpression::quoted_static_call(Span::new(file, l, h), ty, trt, fn_name, fn_generics, args, ImplId(impl_id), impl_generics),
    <l:@L> "$[While](" <label:OrUnderscore<Identifier>> "," <i:QuotedId> "," <c:Expression> "," <t:Block> "," <e:Block> ")$" <h:@R> =>
        AstExpression::quoted_while_loop(Span::new(file, l, h), label, LoopId(i), c, t, e),
    <l:@L> "$[For](" <label:OrUnderscore<Identifier>> "," <p:Pattern> "," <c:Expression> "," <t:Block> "," <e:Block> ")$" <h:@R> =>
        AstExpression::for_loop(Span::new(file, l, h), label, p, c, t, e),
    <l:@L> "$[GlobalVariable](" <i:IdentifierPath> ")$" <h:@R> =>
        AstExpression::global_variable(Span::new(file, l, h), i),
    <l:@L> "$[GlobalFn](" <i:IdentifierPath> ")$" <h:@R> =>
        AstExpression::global_fn(Span::new(file, l, h), i),
    <l:@L> "$[Closure]("
        "(" <p:CommaTrailingOrEmpty<Pattern>> ")" ","
        <r:Type> ","
        <e:Expression> ","
        <c:OrUnderscore<QuotedClosureCaptures>> ","
        <s:OrUnderscore<QuotedClosureScope>> ")$" <h:@R> =>
        AstExpression::quoted_closure(Span::new(file, l, h), p, r, e, c, s),
};

QuotedClosureCaptures = {
    "(" <CommaTrailingOrEmpty<QuotedClosureCapture>> ")",
};

QuotedClosureCapture = {
    "(" <QuotedNamedVariable> "," <QuotedNamedVariable> ")",
};

QuotedClosureScope = {
    "(" <CommaTrailingOrEmpty<QuotedClosureScopeEntry>> ")",
};

QuotedClosureScopeEntry = {
    "(" <QuotedId> "," <QuotedNamedVariable> ")",
};


// These are block-like expressions, and they are important because
// they can stand as statements without an extra `.` operator.
UndottableExpression: AstExpression = {
    <IfStatement>,
    <l:@L> <a:MaybeLabel> "while" <c:PreblockExpression> <b:Block> <e:MaybeElseBlock> <h:@R> => AstExpression::while_loop(Span::new(file, l, h), a, c, b, e),
    <l:@L> <a:MaybeLabel> "for" <p:Pattern> "in" <c:PreblockExpression> <b:Block> <e:MaybeElseBlock> <h:@R> => AstExpression::for_loop(Span::new(file, l, h), a, p, c, b, e),
    <l:@L> "match" <c:PreblockExpression> <h:@R> "{" <b:CommaTrailingOrEmpty<MatchBranch>> "}" => AstExpression::match_statement(Span::new(file, l, h), c, b),
    <l:@L> <b:Block> <h:@R> => AstExpression::block(Span::new(file, l, h), b),
    <ConditionalCompilationExpression>,
};

MaybeLabel: Option<String> = {
    ":" <Identifier> => Some(<>),
    () => None,
};

ConditionalCompilationExpression: AstExpression = {
    <l:@L> <v:(<ConditionalCompilationBranch> "else")+> <e:ConditionalCompilationBranch> <h:@R> =>?
        Ok(AstExpression::conditional_compilation(Span::new(file, l, h), dedup_keys("conditional compilation", append(v, e))?)),
};

ConditionalCompilationBranch: (String, AstBlock) = {
    "impl" <String> <Block>,
};

MaybeElseOrIfBlock: AstBlock = {
    <l:@L> => AstBlock::empty(Span::new(file, l, l)),
    "else" <Block>,
    // `if` expressions are the only ones that can be chained
    // after an `else` without an additional block.
    "else" <IfStatement> => AstBlock::new(vec![], <>),
};

IfStatement: AstExpression = {
    <l:@L> "if" <c:PreblockExpression> <b:Block> <e:MaybeElseOrIfBlock> <h:@R> =>
        AstExpression::if_statement(Span::new(file, l, h), c, b, e),
    <l:@L> "if" "let" <p:Pattern> "=" <c:PreblockExpression> <il:@L> <b:Block> <ih:@R> <el:@L> <e:MaybeElseOrIfBlock> <h:@R> => {
        let then_span = Span::new(file, il, ih);
        let else_span = Span::new(file, el, h);

        AstExpression::match_statement(Span::new(file, l, h), c, vec![
            AstMatchBranch::new(p, AstExpression::block(then_span, b)),
            AstMatchBranch::new(AstMatchPattern::underscore(else_span, AstType::infer()), AstExpression::block(else_span, e)),
        ])
    },
};

MaybeElseBlock: AstBlock = {
    "else" <Block>,
    <l:@L> => AstBlock::empty(Span::new(file, l, l)),
};

IdentifierExpression: AstExpression = {
    <l:@L> <k:IdentifierPath> <h:@R> => match k {
        ModuleRef::Denormalized(mut k) if k.len() == 1 =>
            AstExpression::identifier(Span::new(file, l, h), k.pop().unwrap()),
        m =>
            AstExpression::global_variable(Span::new(file, l, h), m),
    },
    // Function calls with the "minifish" syntax, e.g.
    //   panic:<Int>("Yikes!")
    <l:@L> <i:IdentifierPath> ":<" <g:CommaTrailing<Type>> ">" "(" <p:CommaTrailingOrEmpty<Expression>> ")" <h:@R>
        => AstExpression::call(Span::new(file, l, h), i, g, p),
};

InterpolateBody: AstExpression = {
    <l:@L> <e:Expression> <s:InterpolateContinue> <s2:InterpolateBody> <h:@R> => AstExpression::string_interpolation_continue(Span::new(file, l, h), e, s, s2),
    <l:@L> <e:Expression> <s:InterpolateEnd> <h:@R> => AstExpression::string_interpolation_end(Span::new(file, l, h), e, s),
};

TupleExpression: AstExpression = {
    <l:@L> "(" ")" <h:@R> => AstExpression::nothing(Span::new(file, l, h)),
    <l:@L> "(" <v:(<Expression> ",")+> <e:Expression?> ")" <h:@R> =>
        AstExpression::tuple_literal(Span::new(file, l, h), append_maybe(v, e)),
};

Literal: AstLiteral = {
    "true" => AstLiteral::True,
    "false" => AstLiteral::False,
    <String> => AstLiteral::String(<>),
    <Integer> => AstLiteral::Int(<>),
    <Float> => AstLiteral::Float(<>),
    <Char> => AstLiteral::Char(<>),
};

MatchBranch: AstMatchBranch = {
    <Pattern> "=>" <Expression> => AstMatchBranch::new(<>),
    "$[MatchBranch](" <mut b:MatchBranch> "," "(" <scope:CommaTrailingOrEmpty<QuotedNamedVariable>> ")" ")$" => {
        amend_variables(scope, &mut b.scope);
        b
    }
};

// --- Patterns --- //

Pattern: AstMatchPattern = {
    // Ignore pattern, `_`
    <l:@L> "_" <t:MaybePatternType> <h:@R> => AstMatchPattern::underscore(Span::new(file, l, h), t),
    // A literal pattern (Bool, String, Int, Float, Char)
    <l:@L> <i:Literal> <t:MaybePatternType> <h:@R> => AstMatchPattern::literal(Span::new(file, l, h), i, t),
    // A variable binding
    <l:@L> <i:Identifier> <t:MaybePatternType> <h:@R> =>
        AstMatchPattern::identifier(Span::new(file, l, h), i, t),
    // The empty tuple pattern
    <l:@L> "(" ")" <t:MaybePatternType> <h:@R> => AstMatchPattern::empty(Span::new(file, l, h), t),
    // A non-empty tuple pattern
    // NOTE: This does not allow `(a)`, due to congruency with tuple construction.
    <l:@L> "(" <v:(<Pattern> ",")+> <e:Pattern?> ")" <t:MaybePatternType> <h:@R> =>
        AstMatchPattern::tuple(Span::new(file, l, h), append_maybe(v, e), t),
    // Enum constructor tuple patterns
    <l:@L> <e:TypeNamePath> <g:MaybeExprGenerics> "!" <v:TypeName> <t:MaybePatternType> <h:@R> =>
        AstMatchPattern::plain_enum(Span::new(file, l, h), e, g, v, t),
    <l:@L> <e:TypeNamePath> <g:MaybeExprGenerics> "!" <v:TypeName> <p:NamedPatternFields> <t:MaybePatternType> <h:@R> =>?
        Ok(AstMatchPattern::named_enum(Span::new(file, l, h), e, g, v, dedup_keys("named enum", p.0)?, p.1, t)),
    <l:@L> <e:TypeNamePath> <g:MaybeExprGenerics> "!" <v:TypeName> <p:PositionalPatternFields> <t:MaybePatternType> <h:@R> =>
        AstMatchPattern::positional_enum(Span::new(file, l, h), e, g, v, p.0, p.1, t),

    "$[SpannedPattern](" <f:QuotedId> "," <l:QuotedId> "," <h:QuotedId> "," <t:Type> "," <mut p:Pattern> ")$" => {
        p.span = Span::new(FileId(f), l, h);
        p.ty = t;
        p
    },
    <q:QuotedNamedVariable> =>
        AstMatchPattern::quoted_named_variable(q),
};

MaybePatternType: AstType = {
    ":" <Type>,
    () => AstType::infer(),
};

NamedPatternFields: (Vec<(String, AstMatchPattern)>, bool) = {
    "{" "..." "}" => (vec![], true),
    "{" <NamedPatternField> "}" => (vec![<>], false),
    "{" <(<NamedPatternField> ",")+> "..." "}" => (<>, true),
    "{" <(<NamedPatternField> ",")+> <NamedPatternField?> "}" => (append_maybe(<>), false),
};

NamedPatternField: (String, AstMatchPattern) = {
    <l:@L> <i:Identifier> <h:@R> => (i.clone(), AstMatchPattern::identifier(Span::new(file, l, h), i, AstType::infer())),
    <Identifier> ":" <Pattern>,
};

PositionalPatternFields: (Vec<AstMatchPattern>, bool) = {
    "(" "..." ")" => (vec![], true),
    "(" <Pattern> ")" => (vec![<>], false),
    "(" <(<Pattern> ",")+> "..." ")" => (<>, true),
    "(" <(<Pattern> ",")+> <Pattern?> ")" => (append_maybe(<>), false),
};

// --- Use --- //

Use: (bool, AstUse) = {
    // use a::b::c::Type.
    "use" <p:"pub"?> <m:MaybeMod> <v:(<Identifier> "::")*> <e:TypeName> "."
        => (p.is_some(), AstUse::Use(combine(m, v), e)),
    // use a::b::c::d.
        "use" <p:"pub"?> <m:MaybeMod> <v:(<Identifier> "::")*> <e:Identifier> "."
        => (p.is_some(), AstUse::Use(combine(m, v), e)),
    // use a::b::c::*.
        "use" <p:"pub"?> <m:MaybeMod> <v:(<Identifier> "::")*> "*" "."
        => (p.is_some(), AstUse::UseAll(combine(m, v))),
};

// Possibly append `mod::` to the beginning of a `use` statement.
// When done so, it will be expanded by the parser to the full module path of the current file.
MaybeMod: Vec<String> = {
    "mod" "::" => FileRegistry::parent_mod_path(file),
    () => vec![],
}

// --- Object --- //

Object: AstObject = {
    "object" <l:@L> <t:TypeName> <h:@R> <g:MaybeDeclGenerics> <r:MaybeRestrictions> "{" <m:CommaTrailingOrEmpty<ObjectMember>> "}" =>
        AstObject::new(file, Span::new(file, l, h), t, g, r, m),
}

ObjectMember: AstObjectMember = {
    <l:@L> <i:Identifier> ":" <t:Type> <h:@R> => AstObjectMember::new(Span::new(file, l, h), i, t),
};

// --- Trait --- //

Trait: AstTrait = {
    "trait" <l:@L> <t:TypeName> <h:@R> <g:MaybeDeclGenerics> <r:MaybeRestrictions> "{" <m:(TraitMember)*> "}" =>?
        Ok(AstTrait::try_new_from_members(file, Span::new(file, l, h), t, g, r, m)?),
};

TraitMember: AstTraitMember = {
    // Associated type, with optional type constraints
    // e.g. `type Item: Eq<Int> + Hash.`
    "type" <TypeName> "." => AstTraitMember::Type(<>, vec![]),
    "type" <TypeName> ":" <PlusSeparated<TraitTypeWithAssocs>> "." => AstTraitMember::Type(<>),
    // Object function signature, e.g. `fn add(self, i: Int) -> Int.`
    <ObjectFunctionSignature> "." => AstTraitMember::Function(<>),
};

// Object function signatures are bodyless, and therefore have None definition.
ObjectFunctionSignature: AstObjectFunction = {
    "fn" <l:@L> <i:Identifier> <h:@R> <g:MaybeDeclGenerics> <p:DeclObjectParams> <r:MaybeReturn> <w:MaybeRestrictions> =>
        AstObjectFunction::new(Span::new(file, l, h), i, g, p.0, p.1, r, w, None),
};

DeclObjectParams: (bool, Vec<AstNamedVariable>) = {
    // Regular declaration parameters, no `self` type
    "(" <CommaTrailingOrEmpty<DeclParam>> ")" => (false, <>),
    // Case of `(self)`
    // NOTE: for stupid reasons I delegated appending the "self" parameter to the parser. Why?
    "(" <l:@L> "self" <h:@R> ")" =>
        (true, vec![AstNamedVariable::new(Span::new(file, l, h), "self".to_string(), AstType::SelfType)]),
    // Case of `(self, a: Int, b: (Int,))`
    "(" <l:@L> "self" <h:@R> "," <mut p:CommaTrailingOrEmpty<DeclParam>> ")" => {
        p.insert(0, AstNamedVariable::new(Span::new(file, l, h), "self".to_string(), AstType::SelfType));
        (true, p)
    },
};

// --- Enum --- //

Enum: AstEnum = {
    "enum" <l:@L> <t:TypeName> <h:@R> <g:MaybeDeclGenerics> <r:MaybeRestrictions> "{" <v:CommaTrailingOrEmpty<EnumVariant>> "}" =>?
        Ok(AstEnum::new(file, Span::new(file, l, h), t, g, r, dedup_keys("enum", v)?)),
};

EnumVariant: (String, AstEnumVariant) = {
    // Plain enum, e.g. Option!None
    <l:@L> <v:TypeName> <h:@R> =>
        (v.clone(), AstEnumVariant::new_plain(Span::new(file, l, h), v)),
    // Named enum, e.g. Enum!Name { a: 1, b }
    <l:@L> <v:TypeName> <h:@R> "{" <f:CommaTrailing<NamedEnumField>> "}" =>? {
        check_dedup_keys("named enum variant", f.iter().map(|(k, _)| k))?;
        Ok((v.clone(), AstEnumVariant::new_named(Span::new(file, l, h), v, f)))
    },
    // Positional enum, e.g. Option!Some(1)
    <l:@L> <v:TypeName> <h:@R> "(" <f:CommaTrailing<Type>> ")" =>
        (v.clone(), AstEnumVariant::new_positional(Span::new(file, l, h), v, f)),
};

NamedEnumField = <Identifier> ":" <Type>;

// -- Impl --- //

pub Impl: AstImpl = {
    <l:@L> "impl" <h:@R> <g:MaybeDeclGenerics> <tr:TraitType?> "for" <t:Type> <r:MaybeRestrictions> "{" <m:(ImplMember)*> "}" =>?
        Ok(AstImpl::try_new_from_members(Span::new(file, l, h), g, tr, t, r, m)?)
};

ImplMember: AstImplMember = {
    // Associated type
    "type" <TypeName> "=" <Type> "." => AstImplMember::Type(<>),
    // Member implementation
    <mut f:ObjectFunctionSignature> "=" <e:Expression> "." => {
        f.definition = Some(e);
        AstImplMember::Function(f)
    },
};